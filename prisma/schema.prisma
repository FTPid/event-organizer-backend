// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String
  role         Role
  referralCode String?       @unique
  points       Int?          @default(0)
  createdAt    DateTime?     @default(now())
  events       Event[]
  tickets      Ticket[]
  transactions Transaction[]

  Rating Rating[]
}

model Event {
  id             Int           @id @default(autoincrement())
  image          String?
  name           String
  description    String
  type           EventType
  price          Int?
  startDate      DateTime
  available_seat Int           @default(0)
  organizer      User          @relation(fields: [organizerId], references: [id])
  organizerId    Int
  location       Location      @relation(fields: [locationId], references: [id])
  locationId     Int
  category       Category      @relation(fields: [categoryId], references: [id])
  categoryId     Int
  tickets        Ticket[]
  promotions     Promotion[]
  Transaction    Transaction[]

  Rating Rating[]
}

model Promotion {
  id           Int           @id @default(autoincrement())
  name         String
  discount     Int
  type         PromotionType
  referralCode String?
  event        Event         @relation(fields: [eventId], references: [id])
  eventId      Int
  isActive     Boolean       @default(true)
  usageLimit   Int?
  usedCount    Int
  Transaction  Transaction[]
}

enum PromotionType {
  DISCOUNT
  REFERRAL
}

model Location {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  address String
  events  Event[]
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  events Event[]
}

model Ticket {
  id            Int         @id @default(autoincrement())
  event         Event       @relation(fields: [eventId], references: [id])
  eventId       Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  createdAt     DateTime    @default(now())
  User          User[]
}

model Transaction {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  event         Event         @relation(fields: [eventId], references: [id])
  eventId       Int
  totalAmount   Int
  discount      Int?
  referralCode  String?
  promotionId   Int?
  promotion     Promotion?    @relation(fields: [promotionId], references: [id])
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  paymentProof  String?
  Ticket        Ticket[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  CUSTOMER
  ORGANIZER
}

enum EventType {
  FREE
  PAID
}

enum PaymentStatus {
  PENDING
  VERIFICATION
  COMPLETED
  FAILED
}
